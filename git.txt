У Git есть три основных состояния, в которых могут находиться ваши файлы: 
зафиксированное (committed) - файл уже сохранён в вашей локальной базе.
изменённое (modified) - файлы, которые поменялись, но ещё не были зафиксированы.
подготовленное (staged) - изменённые файлы, отмеченные для включения в следующий коммит.

три основные секции проекта git:
Git-директория (Git directory)
рабочая директория (working directory)
область подготовленных файлов (staging area).

Git-директория — это то место, где Git хранит метаданные и базу объектов вашего проекта. 
Это самая важная часть Git, и это та часть, которая копируется при клонировании репозитория 
с другого компьютера.

Рабочая директория является снимком версии проекта. Файлы распаковываются из сжатой
базы данных в Git-директории и располагаются на диске, для того чтобы их можно было изменять 
и использовать.

Область подготовленных файлов — это файл, обычно располагающийся в вашей Git-директории, 
в нём содержится информация о том, какие изменения попадут в следующий коммит

Базовый подход в работе с Git выглядит так:

1)Вы изменяете файлы в вашей рабочей директории.

2)Вы выборочно добавляете в индекс только те изменения, которые должны попасть в следующий коммит, 
добавляя тем самым снимки только этих изменений в область подготовленных файлов.

3)Когда вы делаете коммит, используются файлы из индекса как есть, 
и этот снимок сохраняется в вашу Git-директорию.

git config --list используется, чтобы показать все настройки, которые Git найдёт.
Некоторые ключи (названия) настроек могут отображаться несколько раз, потому что 
Git читает настройки из разных файлов (например, из /etc/gitconfig и ~/.gitconfig).(1.6)

Так как Git читает значение настроек из нескольких файлов, возможна ситуация когда 
Git использует не то значение что вы ожидали. В таком случае вы можете спросить Git 
об origin этого значения. Git выведет имя файла, из которого значение для настройки 
было взято последним(1.6):
git config --show-origin rerere.autoUpdate

помощь по командам(1.7):
git help <команда>
git <команда> --help
man git-<команда>